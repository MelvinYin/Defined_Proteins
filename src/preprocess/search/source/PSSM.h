/*
    Header file for common PSSM functions
*/

#define MAX_PSSM_LENGTH 50

static const char *amino_acids = "ACDEFGHIKLMNPQRSTVWY";

typedef struct List {
    double score;
    struct List *next;
} List;

typedef struct Sequence {
    char description[100];
    char *sequence;
} Sequence;

typedef struct Matrix {
    char initial_segment[MAX_PSSM_LENGTH + 1];
    char origin[61]; // id of the origin
    int id;	   //matrix id
    int K;	   //number of segments with score > score(p)
    int N;	   //number of segments in proteome
    int L;	   //length of profile in amino acids <=MAX_PSSM_LENGTH
    double p;	   //p-value
    double score;  //score(p)
    double omega;  //pseudocount coefficient
    double freq[MAX_PSSM_LENGTH][26]; //frequencies: 0..1
} Matrix;


//Generated by procedure: find_permutations.R find_permutations(50, 3, 10)
    int random_index_50[11][50] = 
	{{46,20,41,29,21,26,37,13,17,36,47,8,25,43,9,48,39,24,1,5,34,45,32,18,14,40,38,28,7,6,11,27,0,44,33,19,16,35,23,4,42,49,2,15,30,12,3,10,22,31},
	{26,41,10,42,36,32,44,16,21,5,20,34,37,33,35,0,46,45,19,18,39,9,27,1,7,13,8,14,28,15,4,43,48,12,29,25,24,40,31,30,38,47,23,11,3,22,2,49,17,6},
        {17,10,21,31,40,18,44,39,30,29,33,41,38,34,15,7,5,23,36,35,47,42,25,19,48,11,3,37,20,43,9,46,1,26,28,22,12,0,4,24,27,14,32,8,16,6,45,49,2,13},
	{48,1,42,34,15,25,30,35,38,2,46,43,45,47,33,0,20,11,14,7,21,32,49,23,37,5,13,39,18,36,28,26,9,22,31,41,19,10,24,8,6,17,44,40,16,29,4,3,27,12},
	{35,48,29,36,47,45,40,11,33,24,9,8,32,15,43,4,34,5,21,6,14,30,13,28,2,26,39,19,31,46,37,41,1,18,38,49,10,17,44,23,22,3,27,20,25,16,12,42,7,0},
	{37,2,8,0,19,36,39,20,13,47,22,31,7,48,32,26,11,42,17,41,44,10,5,49,45,40,1,30,38,29,24,18,43,6,15,3,14,35,34,46,4,23,33,12,28,21,16,27,25,9},
	{31,37,39,41,44,12,18,26,47,24,36,16,8,15,43,6,30,49,38,35,14,19,22,9,28,34,48,5,45,32,27,23,25,46,21,42,40,11,17,0,20,29,13,10,7,1,2,4,3,33},
	{2,35,10,39,47,28,31,44,43,29,37,6,46,45,30,1,16,32,5,25,24,18,11,34,26,21,38,14,22,7,20,23,17,42,33,48,0,19,41,49,12,9,40,4,13,8,27,3,36,15},
	{28,30,33,14,11,48,26,46,21,1,35,49,15,43,37,42,24,16,10,13,34,25,44,23,41,12,9,7,4,20,8,5,29,45,39,17,0,3,31,27,19,36,6,22,40,47,2,32,18,38},
	{42,33,40,26,0,4,36,22,37,19,8,17,30,46,31,48,44,29,45,28,15,41,13,47,27,16,10,5,24,3,35,38,21,49,34,43,1,25,39,20,12,2,9,7,14,18,6,32,23,11},
        {27,30,16,49,38,33,11,36,0,32,42,7,26,41,40,44,45,4,21,47,35,12,31,13,28,15,2,19,39,22,3,18,5,34,10,48,43,6,29,24,46,14,37,17,1,25,20,23,8,9}};

    int random_index_30[1][30] = 
	{{28,1,29,24,22,19,26,9,0,13,23,18,10,14,20,25,27,3,15,2,7,12,6,11,17,21,8,16,5,4}};

#define MIN(a, b)  (((a) < (b)) ? (a) : (b))
#define MAX(a, b)  (((a) > (b)) ? (a) : (b))
#define AVG(a, b)  ((a+b)/2.0)
